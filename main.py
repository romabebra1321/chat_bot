import telebot
from telebot import types
import logging
import time
import requests
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("cpu_bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
try:
    BOT_TOKEN = "7801996415:AAGz-51WgTInD7kzdknKAgeOvU1YSut8CUE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN":
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    bot = telebot.TeleBot(BOT_TOKEN)
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
processors = {
    "office": [
        {"name": "Intel Core i3-12100", "price": "~15 000 ‚ÇΩ", "desc": "–ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –æ—Ñ–∏—Å–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≤–µ–±-—Å–µ—Ä—Ñ–∏–Ω–≥–∞"},
        {"name": "AMD Ryzen 3 4100", "price": "~12 000 ‚ÇΩ", "desc": "–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π 4-—è–¥–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"},
        {"name": "Intel Pentium Gold G7400", "price": "~8 000 ‚ÇΩ", "desc": "–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á"}
    ],
    "gaming": [
        {"name": "Intel Core i5-13600KF", "price": "~35 000 ‚ÇΩ", "desc": "14 —è–¥–µ—Ä (6P+8E) –¥–ª—è –∏–≥—Ä –≤ 1440p"},
        {"name": "AMD Ryzen 5 7600X", "price": "~32 000 ‚ÇΩ", "desc": "5 –Ω–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –æ—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"},
        {"name": "Intel Core i7-13700K", "price": "~45 000 ‚ÇΩ", "desc": "–î–ª—è 4–ö-–≥–µ–π–º–∏–Ω–≥–∞ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"},
        {"name": "AMD Ryzen 7 7800X3D", "price": "~50 000 ‚ÇΩ", "desc": "3D V-Cache –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ FPS"}
    ],
    "professional": [
        {"name": "Intel Core i9-14900K", "price": "~75 000 ‚ÇΩ", "desc": "24 —è–¥—Ä–∞ (8P+16E), —Ç—É—Ä–±–æ-—á–∞—Å—Ç–æ—Ç–∞ –¥–æ 6.0 –ì–ì—Ü"},
        {"name": "AMD Ryzen 9 7950X", "price": "~70 000 ‚ÇΩ", "desc": "16 —è–¥–µ—Ä/32 –ø–æ—Ç–æ–∫–∞, 5.7 –ì–ì—Ü"},
        {"name": "Intel Xeon W5-3435X", "price": "~250 000 ‚ÇΩ", "desc": "–î–ª—è —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π (16 —è–¥–µ—Ä)"},
        {"name": "AMD Threadripper PRO 5975WX", "price": "~300 000 ‚ÇΩ", "desc": "32 —è–¥—Ä–∞, 64 –ø–æ—Ç–æ–∫–∞"}
    ],
    "budget": [
        {"name": "Intel Celeron G6900", "price": "~5 000 ‚ÇΩ", "desc": "–°–∞–º—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á"},
        {"name": "AMD Athlon 3000G", "price": "~6 000 ‚ÇΩ", "desc": "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ Radeon Vega 3"},
        {"name": "Intel Core i3-10100F", "price": "~9 000 ‚ÇΩ", "desc": "4 —è–¥—Ä–∞/8 –ø–æ—Ç–æ–∫–æ–≤ –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏"}
    ],
    "home_server": [
        {"name": "Intel Core i5-13400", "price": "~25 000 ‚ÇΩ", "desc": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π 10-—è–¥–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è NAS"},
        {"name": "AMD Ryzen 5 5600G", "price": "~18 000 ‚ÇΩ", "desc": "–° –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π –¥–ª—è –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä–∞"},
        {"name": "Intel Xeon E-2336", "price": "~40 000 ‚ÇΩ", "desc": "–ù–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è 24/7 —Ä–∞–±–æ—Ç—ã"}
    ],
    "content_creation": [
        {"name": "AMD Ryzen 9 7900X", "price": "~55 000 ‚ÇΩ", "desc": "12 —è–¥–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ –≤–∏–¥–µ–æ"},
        {"name": "Intel Core i7-13700KF", "price": "~42 000 ‚ÇΩ", "desc": "16 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è 3D-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"},
        {"name": "AMD Threadripper 3960X", "price": "~120 000 ‚ÇΩ", "desc": "24 —è–¥—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞"}
    ]
}

def check_telegram_api():
    try:
        response = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getMe", timeout=10)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
        return False

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("–û—Ñ–∏—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ üìÑ"),
        types.KeyboardButton("–ò–≥—Ä—ã üéÆ"),
        types.KeyboardButton("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ üñ•Ô∏è"),
        types.KeyboardButton("–ë—é–¥–∂–µ—Ç–Ω—ã–µ –ü–ö üí∞"),
        types.KeyboardButton("–î–æ–º–∞—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä üñ•Ô∏è"),
        types.KeyboardButton("–ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–∏–≤ üé¨"),
        types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô")
    ]
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        bot.send_message(
            message.chat.id,"üîç <b>CPU Selector Bot</b> –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á:",
            parse_mode="HTML",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        categories = {
            "–û—Ñ–∏—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ üìÑ": "office",
            "–ò–≥—Ä—ã üéÆ": "gaming",
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ üñ•Ô∏è": "professional",
            "–ë—é–¥–∂–µ—Ç–Ω—ã–µ –ü–ö üí∞": "budget",
            "–î–æ–º–∞—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä üñ•Ô∏è": "home_server",
            "–ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–∏–≤ üé¨": "content_creation",
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô": "start"
        }
        
        if message.text in categories:
            if categories[message.text] == "start":
                send_welcome(message)
            else:
                send_processors(message.chat.id, categories[message.text])
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.", reply_markup=create_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=create_main_keyboard())

def send_processors(chat_id, category):
    try:
        procs = processors.get(category, [])
        if not procs:
            bot.send_message(chat_id, "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=create_main_keyboard())
            return
        
        response = f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã ({category.replace('_', ' ')}):</b>\n\n"
        for proc in procs:
            response += f"‚ñ™Ô∏è <b>{proc['name']}</b> {proc['price']}\n{proc['desc']}\n\n"
        
        bot.send_message(chat_id, response, parse_mode="HTML", reply_markup=create_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_processors: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö.", reply_markup=create_main_keyboard())

def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        try:
            if check_telegram_api():
                logger.info("Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
                bot.infinity_polling(timeout=15, long_polling_timeout=10)
            else:
                logger.warning("Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

if __name__ == "__main__":
    try:
        run_bot()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)









